@page "/account/login"
@using A5Soft.A5App.Application.UseCases.Security
@using A5Soft.A5App.Domain.Security
@using System.Threading
@using System.Security.Claims
@using A5Soft.A5App.Domain
@using A5Soft.CARMA.Application.Authorization
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<CommonLocalization> localizer

<h1>@LoginUseCase.GetCriteriaMetadata().GetDisplayNameForNew()</h1>
           
<InputForm Model="@Input" SubmitLabel=@localizer["Log In"] OnSubmitAsync=StartSigningInAsync 
           OnCancel=ResetPassword CancelLabel =@localizer["Forgot password?"]>
    <InputField For="@(() => Input.Email)" @bind-FieldValue="@Input.Email" />
    <InputField For="@(() => Input.Password)" @bind-FieldValue="@Input.Password" />
</InputForm>
    
<ModalInputForm Model="@Input2fa" HeaderText=@Login2faUseCase.GetCriteriaMetadata().GetDisplayNameForNew()
                SubmitLabel=@localizer["Log In"] OnSubmitAsync=Login2faAsync @ref="Login2FaModal">
    <InputField For="@(() => Input2fa.Token)" @bind-FieldValue="@Input2fa.Token" />
</ModalInputForm>


@code {
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    [Inject]
    private SmartNavigationManager Navigation { get; set; }
    [Inject]
    private IAuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject]
    private ILoginUseCase LoginUseCase { get; set; }
    [Inject]
    private ITwoFactorLoginUseCase Login2faUseCase { get; set; }

    private LoginRequest Input { get; set; } = new LoginRequest();

    private TwoFactorLoginRequest Input2fa { get; set; } = new TwoFactorLoginRequest();

    private ModalInputForm<TwoFactorLoginRequest> Login2FaModal { get; set; }


    private async Task StartSigningInAsync(EditContext context)
    {
        var response = await LoginUseCase.InvokeAsync(Input, CancellationToken.None);
        if (response.Success)
        {
            await OnSuccessAsync(response.Identity);
        }
        else if (response.ProceedToSecondFactor)
        {
            Login2FaModal.Show();
        }
        else
        {
            throw new ValidationException(response.ErrorMessage);
        }
    }

    private async Task Login2faAsync(EditContext context)
    {
        var response = await Login2faUseCase.InvokeAsync(Input2fa, CancellationToken.None);
        if (response.Success)
        {
            await OnSuccessAsync(response.Identity);
        }
        else
        {
            throw new ValidationException(response.ErrorMessage);
        }
    }

    private async Task OnSuccessAsync(ClaimsIdentity identity)
    {
        var cookieValue = identity.Serialize();

        _ = await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie",
            AppAuthenticationHandler.AuthCookieName, cookieValue, 30);

        AuthenticationStateProvider.NotifyIdentityChanged(identity);

        Navigation!.NavigateBackOrMain();
    }

    private void ResetPassword()
    {
        Navigation.NavigateTo("account/forgotpassword");
    }

}
