@page "/account/resetpassword"
@using A5Soft.A5App.Application.UseCases.Security
@using System.Threading
@using A5Soft.CARMA.Application.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<CommonLocalization> localizer

<BSAlert Color="Color.Danger">
    @error
</BSAlert>

@code {
    [Inject]
    private SmartNavigationManager Navigation { get; set; }
    [Inject]
    private IAuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject]
    private IConfirmResetPasswordUseCase ConfirmResetPasswordUseCase { get; set; }
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    private MarkupString error;
                    
    
    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            error = new MarkupString(localizer["No token"]);
            return;
        }

        var result = await ConfirmResetPasswordUseCase.InvokeAsync(token, CancellationToken.None);
        if (result.Success)
        {
            var cookieValue = result.Identity.Serialize();

            _ = await JSRuntime.InvokeAsync<string>("blazorExtensions.WriteCookie",
                AppAuthenticationHandler.AuthCookieName, cookieValue, 30);

            AuthenticationStateProvider.NotifyIdentityChanged(result.Identity);

            Navigation!.NavigateTo("/");
        }
        else
        {
            error = new MarkupString(string.Join("<br/>",
                result.ErrorMessage.Split(Environment.NewLine, StringSplitOptions.None)));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

}